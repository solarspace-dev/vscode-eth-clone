/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/private/verify-deprecated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Sends provided files for verification
         *      */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: address
                         * @example 0x00000000219ab540356cBB839Cbe05303d7705Fa
                         */
                        address: string;
                        /** @example 1 */
                        chain: string;
                        /** @example {
                         *       "metadata.json": "{...}",
                         *       "SimpleStorage.sol": "// file"
                         *     } */
                        files: Record<string, never>;
                        creatorTxHash?: string;
                        chosenContract?: string;
                        match?: string;
                    };
                };
            };
            responses: {
                /** @description The contract has been successfully checked or sourcified */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                address?: string;
                                chainId?: string;
                                status?: string;
                                message?: string;
                                libraryMap?: Record<string, never>;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/upgrade-contract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upgrades an existing contract verification by re-verifying it with the provided data.
         *      */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the Sourcify match to upgrade.
                         * @example 1
                         */
                        sourcifyMatchId: number;
                    };
                };
            };
            responses: {
                /** @description The contract verification has been successfully upgraded. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                message?: string;
                                verifiedContractId?: string;
                            };
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/verify/{chainId}/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify Contract (Standard JSON)
         * @description Submit a contract for verification via the [Solidity standard JSON input](https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description) or [Vyper JSON input](https://docs.vyperlang.org/en/stable/compiling-a-contract.html#input-json-description).
         *
         *     There are no "single file" or "multi-part" verification endpoints because those are essentially wrappers around the Solidity compiler's JSON interface. The verification frontend can provide files and settings options to resemble these.
         */
        post: operations["verify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/verify/metadata/{chainId}/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify Contract (using Solidity metadata.json)
         * @description Endpoint to submit a verification with the Solidity [metadata.json](https://docs.soliditylang.org/en/latest/metadata.html)
         */
        post: operations["verify-metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/verify/etherscan/{chainId}/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import from Etherscan
         * @description Import a contract verified on an Etherscan instance or a service with Etherscan-alike API
         */
        post: operations["import-from-etherscan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/verify/{verificationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check verification job status
         * @description Endpoint to get the status of a verification job.
         *
         *     Alternatively you can directly check the verification status of a contract with with chainId+address at `GET /v2/contract/{chainId}/{address}`
         */
        get: operations["verification-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/contract/{chainId}/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get verified contract
         * @description By default returns minimal information about the contract: `match`, `creation_match`, `runtime_match`, `chainId`, `address`, and `verifiedAt`
         *
         *     To get other details one can either list the fields requested in the `fields` query param or ask all fields but omit several with `omit`. To get everything just pass `fields=all`.
         */
        get: operations["get-contract"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/contracts/{chainId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of verified contracts per chain
         * @description Retrieve the verified contracts on a chain
         */
        get: operations["get-v2-contracts-chainId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * @deprecated
         * @description Sends provided files for verification.
         *
         *     The `chosenContract` is the optional index of the contract to be verified and only needed when there are multiple contracts, i.e. multiple metadata.json in the provided body. For example a full hardhat-output contains metadatas of all contracts compiled.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: address
                         * @example 0x00000000219ab540356cBB839Cbe05303d7705Fa
                         */
                        address: string;
                        /**
                         * Format: supported-chainId
                         * @example 1
                         */
                        chain: string;
                        /** @example {
                         *       "metadata.json": "{...}",
                         *       "SimpleStorage.sol": "pragma solidity ^0.8.0; contract SimpleStorage { function get() public view returns (uint) { return 1; } }"
                         *     } */
                        files: Record<string, never>;
                        /** @example 0xbc2f0848023b6a4b89dd049dadc551428a8e95153bc70d9eee6c14ec843f0a98 */
                        creatorTxHash?: string;
                        /**
                         * @description Optional index for the contract if multiple contracts (i.e. metadata.json files) are present.
                         * @example 0
                         */
                        chosenContract?: string;
                    };
                    "multipart/form-data": {
                        /** Format: address */
                        address: string;
                        /** Format: supported-chainId */
                        chain: string;
                        /** @description This field is required */
                        files?: string | string[] | string[];
                        creatorTxHash?: string;
                        /** @description Optional index for the contract if multiple contracts (i.e. metadata.json files) are present. */
                        chosenContract?: string;
                    };
                };
            };
            responses: {
                /** @description The contract has been successfully checked or sourcified */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                address?: string;
                                chainId?: string;
                                status?: string;
                                message?: string;
                                libraryMap?: Record<string, never>;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Conflict - The contract is already partially verified and the verification yieled a partial match. The files won't be saved. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/verify/vyper": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * @deprecated
         * @description Sends provided Vyper contract files for verification.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: address
                         * @example 0x00000000219ab540356cBB839Cbe05303d7705Fa
                         */
                        address: string;
                        /**
                         * Format: supported-chainId
                         * @example 1
                         */
                        chain: string;
                        /** @example {
                         *       "test.vy": "# @version >=0.3.2\n\n@external\n@view\ndef helloWorld() -> String[24]:\n    return \"Hello World!\""
                         *     } */
                        files: Record<string, never>;
                        /** @example test.vy */
                        contractPath: string;
                        /** @example test */
                        contractName: string;
                        /** @example 0.8.4+commit.c7e474f2 */
                        compilerVersion: string;
                        /** @example {
                         *       "evmVersion": "istanbul",
                         *       "outputSelection": {
                         *         "*": [
                         *           "evm.bytecode"
                         *         ]
                         *       }
                         *     } */
                        compilerSettings?: Record<string, never>;
                        /** @example 0xbc2f0848023b6a4b89dd049dadc551428a8e95153bc70d9eee6c14ec843f0a98 */
                        creatorTxHash?: string;
                    };
                };
            };
            responses: {
                /** @description The contract has been successfully checked or sourcified */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                address?: string;
                                chainId?: string;
                                status?: string;
                                message?: string;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Conflict - The contract is already partially verified and the verification yieled a partial match. The files won't be saved. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/verify/etherscan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify an Etherscan verified contract
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * Format: address
                         * @example 0x07880D44b0f7b75464ad18fc2b980049c40A8bc3
                         */
                        address: string;
                        /**
                         * Format: supported-chainId
                         * @example 1
                         */
                        chainId: string;
                        /** @example ********************************* */
                        apiKey?: string;
                    };
                    "multipart/form-data": {
                        /** Format: address */
                        address: string;
                        /** Format: supported-chainId */
                        chain: string;
                        /** @example ********************************* */
                        apiKey?: string;
                    };
                };
            };
            responses: {
                /** @description The contract has been successfully checked or sourcified */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                address?: string;
                                chainId?: string;
                                status?: string;
                                message?: string;
                                libraryMap?: Record<string, never>;
                            }[];
                        };
                    };
                };
                /** @description Conflict - The contract is already partially verified and the verification yieled a partial match. The files won't be saved. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Too Many Requests sent through Sourcify's own API key */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/verify/solc-json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify solc-json
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * Format: address
                         * @description Contract address
                         * @example 0x07880D44b0f7b75464ad18fc2b980049c40A8bc3
                         */
                        address: string;
                        /**
                         * Format: supported-chainId
                         * @description Chain to check
                         * @example 1
                         */
                        chain: string;
                        /**
                         * @description Files to upload {"path/filename": "content"}
                         * @example {
                         *       "SolcJsonInput.json": "{...}"
                         *     }
                         */
                        files: {
                            [key: string]: string;
                        };
                        /**
                         * @description Compiler version
                         * @example 0.8.4+commit.c7e474f2
                         */
                        compilerVersion: string;
                        /**
                         * @description Name of the contract
                         * @example Storage
                         */
                        contractName: string;
                        /**
                         * @description Creator transaction hash
                         * @example 0xb7efb33c736b1e8ea97e356467f99d99221343f077ce31a3e3ac1d2e0636df1d
                         */
                        creatorTxHash?: string;
                    };
                    "multipart/form-data": {
                        /**
                         * Format: address
                         * @description Contract address
                         */
                        address: string;
                        /**
                         * Format: supported-chainId
                         * @description Chain to check
                         */
                        chain: string;
                        /** @description File content for upload */
                        files?: string | string[];
                        /** @description Compiler version */
                        compilerVersion: string;
                        /** @description Name of the contract */
                        contractName: string;
                        /** @description Creator transaction hash */
                        creatorTxHash?: string;
                    };
                };
            };
            responses: {
                /** @description The contract has been successfully checked or sourcified */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            result?: {
                                address?: string;
                                chainId?: string;
                                status?: string;
                                message?: string;
                                libraryMap?: Record<string, never>;
                            }[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Conflict - The contract is already partially verified and the verification yieled a partial match. The files won't be saved. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repository/contracts/{matchType}/{chain}/{address}/{filePath}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific file from the repository with the file path (static serving)
         * @deprecated
         * @description Retrieve statically served files over the server.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Either `full_match` or `partial_match` */
                    matchType: string;
                    chain: string;
                    address: string;
                    filePath: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The file is found at the path */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": unknown;
                    };
                };
                /** @description The file is not found at the path */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/check-all-by-addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if contracts are verified (full or partial match) by addresses and chain IDs
         * @deprecated
         * @description Checks if contract with the desired chain and address is verified and in the repository. It will search for both perfect and partial matches.
         */
        get: {
            parameters: {
                query: {
                    /** @description Comma seperated string of addresses to check for. */
                    addresses: string;
                    /** @description Comma separated string of chain IDs. */
                    chainIds: string;
                    /** @description Check if the contracts are proxies and what their implementations are. */
                    resolveProxies?: "true" | "false";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK. Also returns `200` with status `false` when not found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            address?: string;
                            chainIds?: {
                                chainId?: string;
                                status?: string;
                                isProxy?: boolean;
                                proxyType?: string;
                                implementations?: {
                                    address?: string;
                                    name?: string;
                                }[];
                                proxyResolutionError?: string;
                            }[];
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/check-by-addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if contracts are verified (full match) by addresses and chain IDs
         * @deprecated
         * @description Checks if contract with the desired chain and address is verified and in the repository. It will search only the perfect matches.
         */
        get: {
            parameters: {
                query: {
                    /** @description The addresses of the contracts. */
                    addresses: string;
                    /** @description The IDs of the chains. */
                    chainIds: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 0xEb30853fc616Bbb8f1444451A3c202cbcd08Fb47 */
                            address?: string;
                            /** @example perfect */
                            status?: string;
                            /** @example [
                             *       "43114",
                             *       "137"
                             *     ] */
                            chainIds?: string[];
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/any/{chain}/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all files of a contract (full and partial match)
         * @deprecated
         * @description Returns all files for the desired contract with the address and chain. Searches both full and partial matches.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chain: string;
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Contract is available */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example full */
                            status?: string;
                            files?: {
                                /** @example metadata.json */
                                name?: string;
                                /** @example /home/data/repository/contracts/full_match/3/0x0000A906D248Cc99FB8CB296C8Ad8C6Df05431c9/metadata.json */
                                path?: string;
                                content?: string;
                            }[];
                        };
                    };
                };
                /** @description Contract is not available */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Files have not been found! */
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{chain}/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all files of a contract (full match)
         * @deprecated
         * @description Returns all files for the desired contract with the address and chain. Searches only for full matches.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chain: string;
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Contract is available in the repository */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example metadata.json */
                            name?: string;
                            /** @example /home/data/repository/contracts/full_match/3/0x0000A906D248Cc99FB8CB296C8Ad8C6Df05431c9/metadata.json */
                            path?: string;
                            content?: string;
                        }[];
                    };
                };
                /** @description Contract is not available in the repository */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Files have not been found! */
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/contracts/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * (Deprecated) Get the first 200 contract addresses verified on a chain (full or partial match)
         * @deprecated
         * @description Returns the first 200 verified contracts from the repository for the desired chain. Searches for full and partial matches. This endpoint is deprecated and only retuns 200 addresses. Use `/files/contracts/any/` and `/files/contracts/full/` instead
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Chain is available as a full match or partial match in the repository */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example [
                             *       "0x1fE5d745beABA808AAdF52057Dd7AAA47b42cFD0",
                             *       "0xE9c31091868d68598Ac881738D159A63532d12f9"
                             *     ] */
                            full?: string[];
                            /** @example [
                             *       "0x0000A906D248Cc99FB8CB296C8Ad8C6Df05431c9",
                             *       "0xE9c31091868d68598Ac881738D159A63532d12f9"
                             *     ] */
                            partial?: string[];
                        };
                    };
                };
                /** @description Cannot use this API if there are more than 200 contracts */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Cannot fetch more than 200 contracts (1521 full matches, 3453 partial matches), please use /contracts/{full|any}/4 with pagination */
                            error?: string;
                        };
                    };
                };
                /** @description Chain is not available as both full match or partial match in the repository */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Contracts have not been found! */
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/contracts/any/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the contract addresses verified on a chain (full or partial match)
         * @deprecated
         * @description Returns the verified contracts from the repository for the desired chain. Searches for full and partial matches. API is paginated. Limit must be a number between 1 and 200.
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    /** @description Order of the results. Default is "asc" (earliest verified contract first) */
                    order?: "asc" | "desc";
                };
                header?: never;
                path: {
                    chain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Chain is available as a full match or partial match in the repository */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example [
                             *       "0x1fE5d745beABA808AAdF52057Dd7AAA47b42cFD0",
                             *       "0xE9c31091868d68598Ac881738D159A63532d12f9"
                             *     ] */
                            results?: string[];
                            pagination?: {
                                currentPage?: number;
                                totalPages?: number;
                                resultsPerPage?: number;
                                resultsCurrentPage?: number;
                                totalResults?: number;
                                hasNextPage?: boolean;
                                hasPreviousPage?: boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/contracts/full/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the contract addresses perfectly verified on a chain
         * @deprecated
         * @description Returns the perfectly verified contracts from the repository for the desired chain. API is paginated. Limit must be a number between 1 and 200.
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    /** @description Order of the results. Default is "asc" (earliest verified contract first) */
                    order?: "asc" | "desc";
                };
                header?: never;
                path: {
                    chain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Chain is available as a full match in the repository */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example [
                             *       "0x1fE5d745beABA808AAdF52057Dd7AAA47b42cFD0",
                             *       "0xE9c31091868d68598Ac881738D159A63532d12f9"
                             *     ] */
                            results?: string[];
                            pagination?: {
                                currentPage?: number;
                                totalPages?: number;
                                resultsPerPage?: number;
                                resultsCurrentPage?: number;
                                totalResults?: number;
                                hasNextPage?: boolean;
                                hasPreviousPage?: boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/tree/any/{chain}/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get file tree (full and partial match)
         * @deprecated
         * @description Returns repository URLs for every file in the source tree for the desired chain and address. Searches for full and partial matches.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chain: string;
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Contract is available */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example full */
                            status?: string;
                            /** @example [
                             *       "https://contractrepostaging.komputing.org/contracts/full_match/5/0x32a5d2240a60dcF7Af8EfAE6d886ec8BeD5f71bA/metadata.json"
                             *     ] */
                            files?: string[];
                        };
                    };
                };
                /** @description Contract is not available */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Files have not been found! */
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/tree/{chain}/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get file tree (full match)
         * @deprecated
         * @description Returns repository URLs for every file in the source tree for the desired chain and address. Searches only for full matches.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    chain: string;
                    address: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Contract is available */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Contract is not available */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Files have not been found! */
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get session data
         * @deprecated
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contracts?: {
                                /** @example 0x3f67e9f57515bb1e7195c7c5af1eff630091567c0bb65ba3dece57a56da766fe */
                                verificationId?: string;
                                /** @example browser/1_Storage.sol */
                                compiledPath?: string;
                                /** @example Storage */
                                name?: string;
                                /** @example 0.6.6+commit.6c089d02 */
                                compilerVersion?: string;
                                files?: {
                                    found?: string[];
                                    missing?: string[];
                                };
                                /** @example error */
                                status?: string;
                            }[];
                            unused?: string[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clear session data
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Error in clearing session */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/input-files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add input files
         * @deprecated
         */
        post: {
            parameters: {
                query?: {
                    /** @description Remote file URL */
                    url?: string;
                    /** @description Dry-run flag. When present and set to true, a successful verification result will not be stored in the repository. */
                    dryrun?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        files?: Record<string, never>;
                    };
                    "multipart/form-data": {
                        /** @description This field is required */
                        files?: string | string[] | string[];
                    };
                };
            };
            responses: {
                /** @description Response is sent when the upload is successful under different conditions. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contracts?: {
                                /** @example browser/1_Storage.sol */
                                compiledPath?: string;
                                /** @example Storage */
                                name?: string;
                                /** @example 0.6.6+commit.6c089d02 */
                                compilerVersion?: string;
                                files?: {
                                    found?: string[];
                                    missing?: string[];
                                };
                                /** @example 0x3f67e9f57515bb1e7195c7c5af1eff630091567c0bb65ba3dece57a56da766fe */
                                verificationId?: string;
                                /** @enum {string} */
                                status?: "perfect" | "partial" | "error";
                            }[];
                            unused?: string[];
                        };
                    };
                };
                /** @description Payload Too Large */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Too much session memory used. Delete some files or clear the session. */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/input-contract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import deployed contract trying to fetch metadata and files form IPFS
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: address */
                        address: string;
                        /** Format: supported-chainId */
                        chainId: string;
                    };
                    "multipart/form-data": {
                        /** Format: address */
                        address: string;
                        /** Format: supported-chainId */
                        chainId: string;
                    };
                };
            };
            responses: {
                /** @description Response is sent when the upload is successful under different conditions. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contracts?: {
                                /** @example browser/1_Storage.sol */
                                compiledPath?: string;
                                /** @example Storage */
                                name?: string;
                                /** @example 0.6.6+commit.6c089d02 */
                                compilerVersion?: string;
                                files?: {
                                    found?: string[];
                                    missing?: string[];
                                };
                                /** @example 0x3f67e9f57515bb1e7195c7c5af1eff630091567c0bb65ba3dece57a56da766fe */
                                verificationId?: string;
                                /** @enum {string} */
                                status?: "perfect" | "partial" | "error";
                            }[];
                            unused?: string[];
                        };
                    };
                };
                /** @description Payload Too Large */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Too much session memory used. Delete some files or clear the session. */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/verify-checked": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify checked contract in session
         * @deprecated
         */
        post: {
            parameters: {
                query?: {
                    /** @description Dry-run flag. When present and set to true, a successful verification result will not be stored in the repository. */
                    dryrun?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        contracts?: {
                            /**
                             * Format: address
                             * @example 0x656d0062eC89c940213E3F3170EA8b2add1c0143
                             */
                            address?: string;
                            /**
                             * Format: supported-chainId
                             * @example 100
                             */
                            chainId?: string;
                            creatorTxHash?: string | null;
                            /** @example 0x3f67e9f57515bb1e7195c7c5af1eff630091567c0bb65ba3dece57a56da766fe */
                            verificationId?: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contracts?: {
                                /** @example 0x3f67e9f57515bb1e7195c7c5af1eff630091567c0bb65ba3dece57a56da766fe */
                                verificationId?: string;
                                /** @example browser/1_Storage.sol */
                                compiledPath?: string;
                                /** @example Storage */
                                name?: string;
                                /** @example 0.6.6+commit.6c089d02 */
                                compilerVersion?: string;
                                /** @example 0x656d0062eC89c940213E3F3170EA8b2add1c0143 */
                                address?: string;
                                /** @example 100 */
                                chainId?: string;
                                files?: {
                                    found?: string[];
                                    missing?: string[];
                                };
                                /** @example perfect */
                                status?: string;
                                /**
                                 * Format: date-time
                                 * @example 2021-01-12T15:41:56.502Z
                                 */
                                storageTimestamp?: string;
                            }[];
                            unused?: string[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example There are currently no pending contracts. */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/input-solc-json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify solc-json
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Files to upload {"path/filename": "content"} */
                        files: {
                            [key: string]: string;
                        };
                        /** @description Compiler version */
                        compilerVersion: string;
                    };
                    "multipart/form-data": {
                        files?: string | string[] | string[];
                        /** @description Compiler version */
                        compilerVersion: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contracts?: {
                                /** @example 0x3f67e9f57515bb1e7195c7c5af1eff630091567c0bb65ba3dece57a56da766fe */
                                verificationId?: string;
                                /** @example browser/1_Storage.sol */
                                compiledPath?: string;
                                /** @example Storage */
                                name?: string;
                                /** @example 0.6.6+commit.6c089d02 */
                                compilerVersion?: string;
                                /** @example 0x656d0062eC89c940213E3F3170EA8b2add1c0143 */
                                address?: string;
                                /** @example 100 */
                                chainId?: string;
                                files?: {
                                    found?: string[];
                                    missing?: string[];
                                };
                                /** @example perfect */
                                status?: string;
                                /**
                                 * Format: date-time
                                 * @example 2021-01-12T15:41:56.502Z
                                 */
                                storageTimestamp?: string;
                            }[];
                            unused?: string[];
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example There are currently no pending contracts. */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/verify/etherscan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify from Etherscan
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: address */
                        address: string;
                        /** Format: supported-chainId */
                        chainId: string;
                        /** @example ********************************* */
                        apiKey?: string;
                    };
                    "multipart/form-data": {
                        /** Format: address */
                        address: string;
                        /** Format: supported-chainId */
                        chain: string;
                        /** @example ********************************* */
                        apiKey?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contracts?: {
                                /** @example 0x3f67e9f57515bb1e7195c7c5af1eff630091567c0bb65ba3dece57a56da766fe */
                                verificationId?: string;
                                /** @example browser/1_Storage.sol */
                                compiledPath?: string;
                                /** @example Storage */
                                name?: string;
                                /** @example 0.6.6+commit.6c089d02 */
                                compilerVersion?: string;
                                /** @example 0x656d0062eC89c940213E3F3170EA8b2add1c0143 */
                                address?: string;
                                /** @example 100 */
                                chainId?: string;
                                files?: {
                                    found?: string[];
                                    missing?: string[];
                                };
                                /** @example perfect */
                                status?: string;
                                /**
                                 * Format: date-time
                                 * @example 2021-01-12T15:41:56.502Z
                                 */
                                storageTimestamp?: string;
                            }[];
                            unused?: string[];
                        };
                    };
                };
                /** @description Bad Request */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string & (unknown | unknown);
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/private/change-log-level": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change the logging level of the application
         * @description Allows changing the logging level dynamically at runtime for the application. Requires Basic Authentication.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The new logging level to set.
                         * @enum {string}
                         */
                        level: "error" | "warn" | "info" | "debug" | "silly";
                    };
                };
            };
            responses: {
                /** @description The logging level was successfully changed. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
                /** @description Bad request (e.g., invalid logging level provided). */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized (missing or invalid Basic Authentication credentials). */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    verify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The chainId number of the EVM chain */
                chainId: string;
                /** @description Contract's 20 byte address in hex string with the 0x prefix. Case insensitive. */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Full [standard JSON object](https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description) to pass to the compiler.
                     *
                     *     Must include the language of the sources. Currently supports Solidity and Vyper.
                     *      */
                    stdJsonInput: Record<string, never>;
                    /**
                     * SolidityCompilerVersion
                     * @example 0.8.7+commit.e28d00a7
                     */
                    compilerVersion: string;
                    /**
                     * @description The fully qualified file path and contract name to indicate which contract to verify.
                     * @example contracts/Storage.sol:Storage
                     */
                    contractIdentifier: string;
                    /**
                     * Keccak256
                     * @example 0xb6ee9d528b336942dd70d3b41e2811be10a473776352009fd73f85604f5ed206
                     */
                    creationTransactionHash?: string;
                };
            };
        };
        responses: {
            /** @description Successfully submitted the verification. The server started to process the verification.
             *
             *     You can follow the verification status via the returned `verificationId` at `GET /v2/verify/{verificationId}` */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        verificationId: string;
                    };
                };
            };
            /** @description Bad request from the client */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            /** @description The contract is already verified */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            /** @description You are sending too many requests to the server */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
        };
    };
    "verify-metadata": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The chainId number of the EVM chain */
                chainId: string;
                /** @description Contract's 20 byte address in hex string with the 0x prefix. Case insensitive. */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A mapping from file path to its content. */
                    sources: {
                        [key: string]: string;
                    };
                    /** @description The [metadata](https://docs.soliditylang.org/en/latest/metadata.html) as an object. */
                    metadata: Record<string, never>;
                    /**
                     * Keccak256
                     * @example 0xb6ee9d528b336942dd70d3b41e2811be10a473776352009fd73f85604f5ed206
                     */
                    creationTransactionHash?: string;
                };
            };
        };
        responses: {
            /** @description Successfully submitted the verification. The server started to process the verification.
             *
             *     You can follow the verification status via the returned `verificationId` at `GET /v2/verify/{verificationId}` */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        verificationId: string;
                    };
                };
            };
            /** @description Bad request from the client */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            /** @description The contract is already verified */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            /** @description You are sending too many requests to the server */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
        };
    };
    "import-from-etherscan": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The chainId number of the EVM chain */
                chainId: string;
                /** @description Contract's 20 byte address in hex string with the 0x prefix. Case insensitive. */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description API key to use when importing from the Etherscan instance or Etherscan-alike API. */
                    apiKey?: string;
                };
            };
        };
        responses: {
            /** @description Successfully submitted the verification. The server started to process the verification.
             *
             *     You can follow the verification status via the returned `verificationId` at `GET /v2/verify/{verificationId}` */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uuid */
                        verificationId: string;
                    };
                };
            };
            /** @description Bad request from the client */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            /** @description You've reached the API key limit for the Etherscan key. */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
        };
    };
    "verification-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Verification Job ID returned from the server for a verification request. */
                verificationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The verification job completed either with success or failure. This endpoint returns `200` even if the verification job fails. Check the `contract.match` field and `error` for verification statuses.
             *
             *     If the job is not completed yet (i.e. pending), the `isJobCompleted` will be false. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        isJobCompleted: boolean;
                        /** Format: uuid */
                        verificationId: string;
                        error?: {
                            /**
                             * @description A string token to indicate the reason of the error
                             * @example unsupported_chain
                             */
                            customCode: string;
                            /**
                             * @description The reasoning of the error
                             * @example The chain with chainId 3153212 is not supported for verification
                             */
                            message: string;
                            /** Format: uuid */
                            errorId: string;
                        } & {
                            /**
                             * BytecodeString
                             * @example 0x608060405234801561001057600080fd5b5060043610610036570565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea264697066735821220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033
                             */
                            recompiledCreationCode?: string;
                            /**
                             * BytecodeString
                             * @example 0x608060405234801561001057600080fd5b5060043610610036570565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea264697066735821220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033
                             */
                            recompiledRuntimeCode?: string;
                            /**
                             * BytecodeString
                             * @example 0x608060405234801561001057600080fd5b5060043610610036570565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea264697066735821220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033
                             */
                            onchainCreationCode?: string;
                            /**
                             * BytecodeString
                             * @example 0x608060405234801561001057600080fd5b5060043610610036570565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea264697066735821220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033
                             */
                            onchainRuntimeCode?: string;
                            /**
                             * Keccak256
                             * @example 0xb6ee9d528b336942dd70d3b41e2811be10a473776352009fd73f85604f5ed206
                             */
                            creationTransactionHash?: string;
                        };
                        /** Format: date-time */
                        jobStartTime?: string;
                        jobFinishTime?: string;
                        /**
                         * @description Time it took to compile the contract on the server in milliseconds.
                         * @example 1333
                         */
                        compilationTime?: string;
                    } & {
                        /** VerifiedContractMinimal */
                        contract?: {
                            /**
                             * VerificationStatusNullable
                             * @enum {string}
                             */
                            match: "match" | "exact_match" | null;
                            /**
                             * VerificationStatusNullable
                             * @enum {string}
                             */
                            creationMatch: "match" | "exact_match" | null;
                            /**
                             * VerificationStatusNullable
                             * @enum {string}
                             */
                            runtimeMatch: "match" | "exact_match" | null;
                            /**
                             * ChainId
                             * @example 11155111
                             */
                            chainId: string;
                            /**
                             * Address
                             * @description Contract Address in hex string. Can be checksummed or not (i.e. can contain capital letters)
                             * @example 0xDFEBAd708F803af22e81044aD228Ff77C83C935c
                             */
                            address: string;
                            /**
                             * Format: date-time
                             * @example 2024-07-24T12:00:00Z
                             */
                            verifiedAt?: string;
                            /** @example 3266227 */
                            matchId?: string;
                        };
                    };
                };
            };
            /** @description The job is not found with this ID */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
        };
    };
    "get-contract": {
        parameters: {
            query?: {
                /** @description Comma seperated fields to include in the response. Can also take `all` */
                fields?: string;
                /** @description Comma seperated fields to NOT include in the response. All fields except matching ones will be returned. Can't be used simultanously with `fields`. */
                omit?: string;
            };
            header?: never;
            path: {
                /** @description The chainId number of the EVM chain */
                chainId: string;
                /** @description Contract's 20 byte address in hex string with the 0x prefix. Case insensitive. */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Example response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * VerificationStatusNullable
                         * @enum {string}
                         */
                        match: "match" | "exact_match" | null;
                        /**
                         * VerificationStatusNullable
                         * @enum {string}
                         */
                        creationMatch: "match" | "exact_match" | null;
                        /**
                         * VerificationStatusNullable
                         * @enum {string}
                         */
                        runtimeMatch: "match" | "exact_match" | null;
                        /**
                         * ChainId
                         * @example 11155111
                         */
                        chainId: string;
                        /**
                         * Address
                         * @description Contract Address in hex string. Can be checksummed or not (i.e. can contain capital letters)
                         * @example 0xDFEBAd708F803af22e81044aD228Ff77C83C935c
                         */
                        address: string;
                        /**
                         * Format: date-time
                         * @example 2024-07-24T12:00:00Z
                         */
                        verifiedAt?: string;
                        /** @example 3266227 */
                        matchId?: string;
                    } & {
                        /** CreationBytecodeResponse */
                        creationBytecode?: {
                            /**
                             * BytecodeString
                             * @example 0x608060405234801561001057600080fd5b5060043610610036570565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea264697066735821220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033
                             */
                            onchainBytecode?: string;
                            /**
                             * BytecodeString
                             * @example 0x608060405234801561001057600080fd5b5060043610610036570565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea264697066735821220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033
                             */
                            recompiledBytecode?: string;
                            sourceMap?: string;
                            /** LinkReferences */
                            linkReferences?: {
                                id?: {
                                    [key: string]: {
                                        [key: string]: {
                                            start?: number;
                                            length?: string;
                                        }[];
                                    };
                                };
                            };
                            /** CborAuxdataObject */
                            cborAuxdata?: {
                                [key: string]: {
                                    /** @example 0xa26469706673582212201e80049ede18eadf4ab7f0dea2c32f2375c33b5aef0b1a16cc5223dbc681559364736f6c63430007060033 */
                                    value?: string;
                                    /** @example 5471 */
                                    offset?: number;
                                };
                            };
                            /** CreationTransformations */
                            transformations?: {
                                /** @description Does not exist on `constructorArguments`. Used to find the corresponding value of the Transformation in the TransformationValues dictionary */
                                id?: string;
                                /**
                                 * @description `insert` when the transformation value is appended to the bytecode e.g. constructor arguments
                                 * @enum {string}
                                 */
                                type: "replace" | "insert";
                                /** @example 1322 */
                                offset: number;
                                /**
                                 * @description Keep in mind the `library` reason is singular here but plural in the TransformationValues dictionary: `libraries`
                                 * @enum {string}
                                 */
                                reason: "cborAuxdata" | "library" | "constructorArguments";
                            }[];
                            /** CreationTransformationValues */
                            transformationValues?: {
                                libraries?: {
                                    [key: string]: string;
                                };
                                /**
                                 * HexString
                                 * @example 0x1a2b3c4d
                                 */
                                constructorArguments?: string;
                                /** @description Different format than the `cborAuxdata` field under the bytecode object.
                                 *
                                 *     Will be here only if there was a transformation on the cborAuxdata. If cborAuxdatas matched, there won't be a transformation. */
                                cborAuxdata?: {
                                    [key: string]: string;
                                };
                            };
                        };
                        /** RuntimeBytecodeResponse */
                        runtimeBytecode?: {
                            /**
                             * BytecodeString
                             * @example 0x608060405234801561001057600080fd5b5060043610610036570565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea264697066735821220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033
                             */
                            onchainBytecode?: string;
                            /**
                             * BytecodeString
                             * @example 0x608060405234801561001057600080fd5b5060043610610036570565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea264697066735821220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033
                             */
                            recompiledBytecode?: string;
                            sourceMap?: string;
                            /** LinkReferences */
                            linkReferences?: {
                                id?: {
                                    [key: string]: {
                                        [key: string]: {
                                            start?: number;
                                            length?: string;
                                        }[];
                                    };
                                };
                            };
                            /** CborAuxdataObject */
                            cborAuxdata?: {
                                [key: string]: {
                                    /** @example 0xa26469706673582212201e80049ede18eadf4ab7f0dea2c32f2375c33b5aef0b1a16cc5223dbc681559364736f6c63430007060033 */
                                    value?: string;
                                    /** @example 5471 */
                                    offset?: number;
                                };
                            };
                            immutableReferences?: {
                                [key: string]: {
                                    start?: number;
                                    length?: number;
                                }[];
                            };
                            /** RuntimeTransformations */
                            transformations?: {
                                /** @description Does not exist on `callProtection`. Used to find the corresponding value of the Transformation in the TransformationValues dictionary */
                                id?: string;
                                /**
                                 * @description Runtime bytecode transformations won't have `insert`, because runtime does not have constructor arguments to be appended.
                                 * @constant
                                 */
                                type: "replace";
                                /** @example 1322 */
                                offset: number;
                                /**
                                 * @description Keep in mind the `library` and `immutable` reasons are singular here but plural in the TransformationValues dictionary: `libraries` and `immutables`
                                 * @enum {string}
                                 */
                                reason: "cborAuxdata" | "library" | "immutable" | "callProtection";
                            }[];
                            /** CreationTransformationValues */
                            transformationValues?: {
                                libraries?: {
                                    [key: string]: string;
                                };
                                immutables?: {
                                    [key: string]: string;
                                };
                                /** @description Different format than the `cborAuxdata` field under the bytecode object.
                                 *
                                 *     Will be here only if there was a transformation on the cborAuxdata. If cborAuxdatas matched, there won't be a transformation. */
                                cborAuxdata?: {
                                    [key: string]: string;
                                };
                                /**
                                 * AddressLowercase
                                 * @description Contract Address in hex string
                                 * @example 0x40b70a4904fad0ff86f8c901b231eac759a0ebb0
                                 */
                                callProtection?: string;
                            };
                        };
                        deployment?: {
                            /**
                             * Keccak256
                             * @example 0xb6ee9d528b336942dd70d3b41e2811be10a473776352009fd73f85604f5ed206
                             */
                            transactionHash?: string;
                            /** @example 21721660 */
                            blockNumber?: string;
                            /** @example 3 */
                            transactionIndex?: string;
                            /**
                             * Address
                             * @description Contract Address in hex string. Can be checksummed or not (i.e. can contain capital letters)
                             * @example 0xDFEBAd708F803af22e81044aD228Ff77C83C935c
                             */
                            deployer?: string;
                        };
                        sources?: {
                            [key: string]: {
                                content?: string;
                            };
                        };
                        compilation?: {
                            /**
                             * Language
                             * @default Solidity
                             * @enum {string}
                             */
                            language: "Solidity" | "Vyper";
                            /** @example solc */
                            compiler?: string;
                            /**
                             * SolidityCompilerVersion
                             * @example 0.8.7+commit.e28d00a7
                             */
                            compilerVersion?: string;
                            compilerSettings?: Record<string, never>;
                            /** @example MyContract */
                            name?: string;
                            /** @example contracts/MyContract.sol:MyContract */
                            fullyQualifiedName?: string;
                        };
                        abi?: Record<string, never>[];
                        metadata?: Record<string, never>;
                        storageLayout?: Record<string, never>;
                        userdoc?: Record<string, never>;
                        devdoc?: Record<string, never>;
                        /** @description Same as stdJsonOutput.sources */
                        sourceIds?: {
                            [key: string]: {
                                /** @description The AST IDs of the sources */
                                id?: number;
                            };
                        };
                        /** @description The input fields conforming the compiler standard-JSON format. */
                        stdJsonInput?: {
                            /**
                             * Language
                             * @default Solidity
                             * @enum {string}
                             */
                            language: "Solidity" | "Vyper";
                            sources?: {
                                [key: string]: {
                                    content?: string;
                                    /**
                                     * Keccak256
                                     * @example 0xb6ee9d528b336942dd70d3b41e2811be10a473776352009fd73f85604f5ed206
                                     */
                                    keccak256?: string;
                                };
                            };
                            settings?: Record<string, never>;
                        };
                        /** @description The outputs conforming the compiler standard JSON format */
                        stdJsonOutput?: {
                            sources?: {
                                [key: string]: {
                                    /** @description The AST IDs of the sources */
                                    id?: number;
                                };
                            };
                            /** @description Contracts output in the standard JSON format.
                             *
                             *     This will only contain the entry for the compilaton target contract, even if the `outputSelection` was `*`. */
                            contracts?: {
                                [key: string]: {
                                    [key: string]: {
                                        abi?: Record<string, never>[];
                                        userdoc?: Record<string, never>;
                                        devdoc?: Record<string, never>;
                                        storageLayout?: Record<string, never>;
                                        /** @description Serialized JSON string */
                                        metadata?: string;
                                        evm?: {
                                            /** @description In Sourcify we refer to this field more explicitly as "creation bytecode" */
                                            bytecode?: {
                                                sourceMap?: string;
                                                /** LinkReferences */
                                                linkReferences?: {
                                                    id?: {
                                                        [key: string]: {
                                                            [key: string]: {
                                                                start?: number;
                                                                length?: string;
                                                            }[];
                                                        };
                                                    };
                                                };
                                                /**
                                                 * HexStringWithout0x
                                                 * @example 1a2b3c4d
                                                 */
                                                object?: string;
                                            };
                                            /** @description In Sourcify we refer to this field more explicitly as "runtime bytecode" */
                                            deployedBytecode?: {
                                                sourceMap?: string;
                                                /** LinkReferences */
                                                linkReferences?: {
                                                    id?: {
                                                        [key: string]: {
                                                            [key: string]: {
                                                                start?: number;
                                                                length?: string;
                                                            }[];
                                                        };
                                                    };
                                                };
                                                /**
                                                 * HexStringWithout0x
                                                 * @example 1a2b3c4d
                                                 */
                                                object?: string;
                                                immutableReferences?: {
                                                    [key: string]: Record<string, never>;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        /** ProxyResoltion */
                        proxyResolution?: {
                            isProxy?: boolean;
                            /**
                             * ProxyType
                             * @enum {string}
                             */
                            proxyType?: "EIP1167Proxy" | "FixedProxy" | "EIP1967Proxy" | "GnosisSafeProxy" | "DiamondProxy" | "PROXIABLEProxy" | "ZeppelinOSProxy" | "SequenceWalletProxy" | null;
                            implementations?: {
                                /** @description Only present if the implementation contract was verified by Sourcify */
                                name?: string;
                                /**
                                 * Address
                                 * @description Contract Address in hex string. Can be checksummed or not (i.e. can contain capital letters)
                                 * @example 0xDFEBAd708F803af22e81044aD228Ff77C83C935c
                                 */
                                address?: string;
                            }[];
                            /** GenericErrorResponse */
                            proxyResolutionError?: {
                                /**
                                 * @description A string token to indicate the reason of the error
                                 * @example unsupported_chain
                                 */
                                customCode: string;
                                /**
                                 * @description The reasoning of the error
                                 * @example The chain with chainId 3153212 is not supported for verification
                                 */
                                message: string;
                                /** Format: uuid */
                                errorId: string;
                            };
                        };
                    };
                };
            };
            /** @description Bad request from the client */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            /** @description The contract is not verified on Sourcify */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * VerificationStatusNullable
                         * @enum {string}
                         */
                        match: "match" | "exact_match" | null;
                        /**
                         * VerificationStatusNullable
                         * @enum {string}
                         */
                        creationMatch: "match" | "exact_match" | null;
                        /**
                         * VerificationStatusNullable
                         * @enum {string}
                         */
                        runtimeMatch: "match" | "exact_match" | null;
                        /**
                         * ChainId
                         * @example 11155111
                         */
                        chainId: string;
                        /**
                         * Address
                         * @description Contract Address in hex string. Can be checksummed or not (i.e. can contain capital letters)
                         * @example 0xDFEBAd708F803af22e81044aD228Ff77C83C935c
                         */
                        address: string;
                        /**
                         * Format: date-time
                         * @example 2024-07-24T12:00:00Z
                         */
                        verifiedAt?: string;
                        /** @example 3266227 */
                        matchId?: string;
                    };
                };
            };
            /** @description You are sending too many requests to the server */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
        };
    };
    "get-v2-contracts-chainId": {
        parameters: {
            query?: {
                /** @description Sorts the contracts by most recent first (`desc`, default), or by oldest first (`asc`) */
                sort?: "asc" | "desc";
                /** @description Number of contracts that should be returned per page. Maximum 200 */
                limit?: number;
                /** @description The last `matchId` returned to get contracts older or newer than it (depending on `sort`) */
                afterMatchId?: string;
            };
            header?: never;
            path: {
                /** @description The chainId number of the EVM chain */
                chainId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        results?: {
                            /**
                             * VerificationStatusNullable
                             * @enum {string}
                             */
                            match: "match" | "exact_match" | null;
                            /**
                             * VerificationStatusNullable
                             * @enum {string}
                             */
                            creationMatch: "match" | "exact_match" | null;
                            /**
                             * VerificationStatusNullable
                             * @enum {string}
                             */
                            runtimeMatch: "match" | "exact_match" | null;
                            /**
                             * ChainId
                             * @example 11155111
                             */
                            chainId: string;
                            /**
                             * Address
                             * @description Contract Address in hex string. Can be checksummed or not (i.e. can contain capital letters)
                             * @example 0xDFEBAd708F803af22e81044aD228Ff77C83C935c
                             */
                            address: string;
                            /**
                             * Format: date-time
                             * @example 2024-07-24T12:00:00Z
                             */
                            verifiedAt?: string;
                            /** @example 3266227 */
                            matchId?: string;
                        }[];
                    };
                };
            };
            /** @description Bad request from the client */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            /** @description You are sending too many requests to the server */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A string token to indicate the reason of the error
                         * @example unsupported_chain
                         */
                        customCode: string;
                        /**
                         * @description The reasoning of the error
                         * @example The chain with chainId 3153212 is not supported for verification
                         */
                        message: string;
                        /** Format: uuid */
                        errorId: string;
                    };
                };
            };
        };
    };
}
